C***********************************************************************
      SUBROUTINE PONPON( FUNC,SUBNAM,IPDS,MEMBER,LENG,WORK,IPRN )
C***********************************************************************
C   PONPON : VIRTUAL HIERARCHICAL FILE ACCESS SYSTEM
C   SEVERAL MODULAR CODES CAN BE INTEGRATED BY PONPON
C   VERSION:1.12 PROGRAMED BY KEISUKE OKUMURA(JAERI), IN OCT/1999
C   LAST MODIFIED:(05 APR 2001)
C***********************************************************************
C                              
C(I/O : INPUT/OUTPUT)
C
C  I  FUNC  : SELLECTION OF FUNCTION (A4)
C     = SRCH  SERACH A MEMBER IN VPDS AND PDS
C             DATA LENGTH WILL BE RETURNED, IF THE MEMEBR IS FOUND
C             OTHERWISE LENG=0 WILL BE RETURNED
C     = READ  READ A MEMBER FROM A VPDS.
C             IF THE MEMBER IS NOT FOUND IN THE VPDS, IT WILL BE READ 
C             FROM PDS, AND THE MEMBER IS PUT IN VPDS. IF THE MEMBER IS
C             NOT FOUND ALSO IN PDS, PROCESS WILL BE STOPPED
C     = WRTP  ADD OR OVER-WRITE A MEMBER IN VPDS AND PDS
C             WHEN VPDS IS NOT AVAILABLE, THE MEMBER WILL BE DELETED
C             FROM VPDS AND WILL BE WRITTEN IN PDS TO AVOID 
C             INCONSISTENCY OF MEMBERS IN VPDS AND PDS
C             FOR PROTECT-WRITE, USE SEARCH & WRITE
C             (USE FOR MEMBERS TO BE KEPT & PROTECTED FROM ABNORMAL END)
C     = WRTV  ADD OR OVER-WRITE A MEMBER ONLY IN A VPDS
C             IF ACCESS MODE (MDACS) IS NOT 'CORE', MEMBER WILL BE 
C             WRITTEN IN PDS. WHEN VPDS IS NOT AVAILABLE, THE MEMBER
C             WILL BE DELETED FROM VPDS AND WILL BE WRITTEN IN PDS TO 
C             AVOID INCONSISTENCY OF MEMBERS IN VPDS AND PDS.
C             IN ORDER TO KEEP THE MEMBER IN PDS, THE MEMBER MUST BE 
C             FINALLY WRITTEN WITH 'DUMP' OR 'WRTP' OR 'CLEA'
C             (USE FOR WORKING MEMBERS FREQUENTLY MODIFIED AND ACCESSED)
C     = DELT  DELETE A SPECIFIED MEMBER IN A VPDS AND IN A PDS
C             DELETED MEMBERS ARE SET AS GHOST MEMBERS
C     = DUMP  DUMP (OVER-WRITE) ALL MEMBERS IN A SPECIFIED VPDS TO PDS
C             THIS OPTION IS CONVENIENT TO DUMP ALL MEMBERS WRITTEN BY
C             'WRTV' MODE ONLY IN VPDS. 
C             AFTER DUMPING THE MEMBERS, INFORMATION FOR THE MEMBERS 
C             WILL BE CLEARED FROM MEMBER LIST (SET AS GHOST MEMBERS),
C             BUT INFORMATION OF /USPDSC/ WILL BE KEPT.
C             MEMORY FOR THE LAST BLOCK OF GHOST MEMBERS WILL BE FREED.
C             AFTER DUMPING THE MEMBERS, NOT-USED MEMORY (GHOST MEMBERS
C             NOT IN THE LAST ) CAN BE PERFECTLY COMPRESSED BY USE OF
C             'COMP' MODE.
C     = COMP  COMPRESS MEMORY IN VPDS (DELETE ALL GHOST MEMBERS AND 
C             RECONSTRUCT MEMBER LIST)
C     = CLEA  CLEAR ALL USED VPDS: OVER-WRITE ALL MEMBERS IN ALL USED
C             VPDS TO PDS
C             INFORMATION OF /USPDSC/ WILL BE KEPT
C
C     NOTE :  LENG MAY BE CHANGED IN PONPON IN SRCH/READ MODE.
C             DUMP OF THE MEMBERS FROM VPDS WITH MOSTY='STAY' TO PDS
C             IS NOT DONE IN DUMP/CLEAR/AUTO-CLEA MODES.
C
C-----------------------------------------------------------------------
C
C  I  SUBNAM  SUBROUTINE NAME(A8) WHICH CALLS THIS SYSTEM
C             (USED ONLY FOR ERROR AND CAUTION MESSAGES)
C  I  IPDS    PDS NUMBER CORRESPONDING (INCLUDING) A MEMBER
C             NOT EFFECTIVE WHEN FUNC = COMP/CLEA
C  I  MEMBER  MEMBER NAME(A8)
C             NOT EFFECTIVE WHEN FUNC = DELT/SRCH/DUMP/COMP/CLEA
C I/O LENG    DATA LENDTH OF A MEMBER (DEPENDING ON FUNCTION)
C             NOTE : INPUT LENG MAY BE CHANGED IN SRCH/READ MODE.
C             << FUNC=SRCH ( O ) >>
C                IF LENG=0  : MEMBER IS NOT EXISTING IN VPDS AND PDS
C                IF LENG>0  : MEMBER WITH LENGTH=LENG IS EXISTING IN
C                             VPDS OR PDS
C             << FUNC=READ (I/O) >>
C                IF LENG>=0 : TOTAL LENGTH OF A MEMBER WILL BE READ,
C                             TOTAL LENGTH OF A MEMBER WILL BE RETURNED
C                IF LENG<0  : SPECIFIED DATA LENGTH WILL BE READ, AND
C                             TOTAL LENGTH OF A MEMBER WILL BE RETURNED
C
C             << FUNC=WRTV OR WRTP (I) >>
C                DATA LENGTH OF WORK TO BE STORED IN A MEMBER
C
C             << FUNC=OTHERS (I) >>
C                DUMMY INPUT (NOT EFFECTIVE)
C
C I/O WORK    DATA ARRAY(REAL WITH SINGLE PRECISION OR INTEGER)
C             NOT EFFECTIVE WHEN FUNC = DELT/SRCH/DUMP/COMP/CLEA
C  I  IPRN    =0 : NO PRINT EXCEPT ERROR MESSAGES (DEVICE:IOMSG)
C             =1 : PRINT READ/WRITE/DELETE INFORMATION FOR PDS
C                  MEMBER XXXXX WITH LENGTH YYY WAS STORED IN /HOME/....
C                  (TOO MUCH PRINTING IN DUMP & CLEA IS SUPPRESSED)
C             =2 : PRINT READ/WRITE/DELETE INFORMATION FOR PDS/VPDS
C                  (TOO MUCH PRINTING IN DUMP & CLEA IS SUPPRESSED)
C             =3 : PRINT READ/WRITE/DELETE INFORMATION FOR PDS/VPDS
C                  (PRINTING IS DONE ALSO IN DUMP OR CLEA FOR DEBUGING)
C             NOTE : IPRN SHOULD BE USERS OPTION FOR DEBUGGING
C
C***********************************************************************
C     BEFORE USING PONPON,
C         /USPDSI/ (IOMSG), (IOVPDS), (IOTMP1), (IOTMP2)
C         /USPDSC/ PDSDIR, (MOACS), (MOSTY)
C     MUST DE DEFINED IN USERS PROGRAMS.
C         IOMSG : PRINT-OUT DEVICE NUMBER FOR MESSAGES IN PONPON
C                 (DEFAULT = 6)
C         IOVPDS: I/O DEVICE FOR READ/WRITE MEMBERS IN PDS FILES
C                 (DEFAULT = 41)
C         IOTMP1: NOT USED IN PONPON (USED IN PONTXT)
C                 (DEFAULT = 42)
C         IOTMP2: NOT USED IN PONPON (USED IN PONTXT)
C                 (DEFAULT = 43)
C         PDSDIR(<A120): DIRECTORY NAME OF EACH PDS FILE
C         MOACS (A4)   : ACCESS MODE TO PDS FILE (CORE/FILE)
C                 (DEFAULT = '    '= 'FILE')
C         MOSTY (A4)   : DUMP PROTECTION MODE IN DUMP/CLAR (STAY/DUMP)
C                 (DEFAULT = '    '= 'DUMP')
C     MEMORY SIZE OR OTHER PARAMETERS FOR PONPON IS DEFINED IN 'INCPDS'
C***********************************************************************
C
C < COMMON /USPDSC/ > : CHARACTER TYPE COMMON DEFINED BY USERS
C  PDSDIR(J)  DIRECTORY(=PATH) NAME(<A120) OF J-TH PDS(=VPDS), WHICH
C             MUST BE DEFINED IN USER PROGRAM AT FIRST
C             EX:/HOME/OKUMURA/MACRO
C  MOACS(J)   ACCESS MODE OF J-TH VPDS/PDS
C             = 'CORE'(=C???) : VIA VPDS
C             = 'FILE'(=???? EXCEPT C???) : PDS DIRECTLY
C  MOSTY(J)   DUMP PROTECTION MODE IN 'CLEA' AND AUTO-CLEA MODE
C             = 'STAY' : MEMBERS IN J-TH VPDS WILL NOT BE DUMPED IN CLEA
C               OR AUTO-CLEAR ( OPTION FOR READ ONLY FILES )
C             = 'DUMP'(=???? EXCEPT 'STAY'): MEMBERS IN J-TH VPDS WILL
C               BE DUMPED IN CLEA OR AUTO-CLEAR
C
C < COMMON /USPDSI/ > : INTEGER TYPE COMMON DEFINED BY USERS
C  I  IOMSG   PRINT DEVICE FOR ERROR OR ACCESS INFORMATION MESSAGES
C             IF IOMSG<0 OR > 99, 6TH DEVICE WILL BE AUTOMATICALLY USED.
C  I  IOVPDS  I/O DEVICE FOR PDS ACCESS : IF IOVPDS =< 0, 43TH DEVICE
C             WILL BE AUTOMATICALLY USED FOR PDS I/O.
C
C- THE FOLLOWING COMMONS ARE NOT NECESSARY FOR USERS PROGRAMS
C
C < COMMON /VPDSI1/ > : INTEGER TYPE COMMON
C  LMEMBR     POSITION OF THE LAST MEMBER (INCLUDING GHOST MEMBER,
C             THAT IS, DELETED MEMBER)
C  NMEMBR     NUMBER OF MEMBERS IN VPDS (NOT INCLUDING GHOST MEMBER)
C  LASTAD     LAST ADDRESS IN VPDS (INCLUDING GHOST MEMBER)
C  LOCUPY     TOTAL LENGTH OF DATA USED IN VPDS (NOT INCLUDING GHOST)
C
C...................<IMAGE OF MEMBER STORAGE IN CORE MEMORY>............
C
C              1  2    3        4        5(=LMEMBR)      * MXVRF
C             AA....BBBBBB..............CCCC--------------  NMEMBR=3
C                   (DATA)   (GHOST)       *   (NOT USED)
C                                          LASTAD
C
C             LOCUPY = SUM OF DATA LENGTH EFFECTIVELY USED(A,B,C)
C             LASTSP:LAST SPACE (NOT USED) IN VPDS
C            ( LASTSP = MXVRF - LASTAD )
C             LEMPTY:TOTAL LENGTH OF EMPTY SPACE IN VPDS ( . OR -)
C            ( LEMPTY = SUM OF EMPTY SPACE = MXVRF - LOCUPY )
C
C            SPACE OF GHOST MEMBERS MAY BE USED IN READ/WRITE MODE
C            THEN, VOID(NOT AVAILABLE SPACE) MAY BE PRODUCED.
C
C              1  2    3     4           5(=LMEMBR)      * MXVRF
C             AA....BBBBBBDDDDDDDD++++++CCCC--------------  NMEMBR=4 
C              (GHOST)     (DATA) (VOID)   *  (NOT USED)
C                                          LASTAD
C                                                                    
C             LOCUPY DO NOT INCLUDE VOIDED SPACE(+)
C             LOCUPY = SUM (A,B,D,C)
C             LEMPTY = MXVRF-LOCUPY = SUM ( ..,++,--)
C             LASTSP = SUM (--)
C             LAVABL : AVAILABLE SPACE FOR NEW MEMBERS : SUM (..,--)
C
C            SPACE OF GHOST MEMBERS AND VOID CAN BE COMPRESSED BY 'COMP'
C            OR FUNCTION OF AUTO-CLEA. BUT, IT SHOULD NOT BE FREQUENTLY
C            CALLED BEACUSE OF TIME-CONSUMING, IF SO MANY MEMBERS OR
C            LARGE MEMBERS ARE THERE IN CORE MEMORY.
C
C              1  2    3     4(=LMEMBR)                  * MXVRF
C             AABBBBBBDDDDDDDDCCCC------------------------  NMEMBR=4 
C                   (DATA)       *         (NOT USED)
C                                LASTAD
C
C.......................................................................
C
C  ISTATS     STATUS OF VPDS
C             = 0 INITIAL SETTING (PONPON CALLED FOR THE FIRST TIME)
C             = 1 PONPON HAS BEEN CALLED PREVIOUSLY
C  NFAIL      NUMBER OF FAILURE TIMES TO ACCESS VPDS BY MEMORY SHORTAGE
C             SEE <AUTO-CLEAR> DESCRIBED BELOW.
C
C < COMMON /VPDSI2/ > : INTEGER ARRAY TYPE COMMON
C  MLENG(I)   DATA LENGTH OF I-TH MEMBER IN VPDS (I=1,LMEMBR)
C  MATTR(I)   ATTRIBUTION OF I-TH MEMBER TO VPDS(=PDS)
C             I-TH MEMBER BELONGS TO MATTR(I)-TH PDS
C  MADRS(I)   FIRST DATA ADDRESS OF I-TH MEMBER IN VPDS
C
C < COMMON /VPDSC1/ > : CHARACTER ARRAY TYPE COMMON
C  MNAME(I)   MEMBER NAME(A8) OF I-TH MEMBER IN VPDS
C             IF MNAME(I)='        ', I-TH MEMBER IS A GHOST(DELETED)
C             MEMBER OR I>LMEMBR(NOT USED)
C  MOACS(J)   DYNAMICALLY CHANGED ACCESS MODE OF J-TH VPDS/PDS
C  
C < COMMON /VPDSR1/ > : 
C  VRF(K)     1-D ARRAY TO STORAGE ALL DATA IN ALL VPDS
C             I-TH MEMBER IS STORED IN K = MADR(I),MADR(I)+MLENG(I)
C
C--------1---------2---------3---------4---------5---------6---------7--
C *START*
C
C < INCLUDE PARAMETERS IN 'INCPDS' >
C   MXVRF : MAX. SIZE (WORDS) OF AVAILABLE MEMORY FOR VPDS
C   MXMBR : MAX. NUMBER OF MEMBERS(INCLUDING GHOST) IN VPDS
C   MXPDS : MAX. NUMBER OF PDS ATTRIBUTIONS (EX. FLUX,XS,....)
C   ICAUTO,MXFAIL,LEFTAV : SEE COMMENT IN AUTO-CLEAR DESCRIVED BELOW.
C
C---- THE FOLLOWING COMMON IS NECESSARY IN USERS PROGRAMS
C     NOTE: DIFFERENT TYPES OF DATA SHOULD NOT BE MIXED IN A COMMON
C           CHARACTER DECLRATION FOR COMMON VARIABLES SHOULE NOT BE
C           OMITTED EVEN WHEN THE VARIABLES ARE NOT USED.
C
      INCLUDE 'INCPDS'
      CHARACTER        PDSDIR*120, MOACS*4, MOSTY*4
      COMMON  /USPDSC/ PDSDIR(MXPDS), MOACS(MXPDS), MOSTY(MXPDS)
      COMMON  /USPDSI/ IOMSG, IOVPDS, IOTMP1, IOTMP2
C
C---- USER DO NOT HAVE USE THE FOLLOWING COMMON
      COMMON  /PDSDEV/ IOPDS
      COMMON  /VPDSI1/ LMEMBR, NMEMBR, LASTAD, LOCUPY, ISTATS, NFAIL
      COMMON  /VPDSI2/ MLENG(MXMBR), MATTR(MXMBR), MADRS(MXMBR)
      COMMON  /VPDSC1/ MNAME(MXMBR), MDACS(MXPDS)
      COMMON  /VPDSR1/ VRF(MXVRF)
C
      CHARACTER*8      MEMBER, MNAME
      CHARACTER*8      SUBNAM
      CHARACTER*4      FUNC, MDACS
      DIMENSION        WORK(*)
C
C***********************************************************************
C INITIALIZATION OF PARAMETERS FOR VPDS (ONLY FIRST CALLED CASE)
C***********************************************************************
C
      IF (ISTATS.NE.1) THEN
        IOPDS  = IOVPDS
        IF(IOMSG.LT.0 .OR. IOMSG.GE.100) IOMSG=6
        LMEMBR = 0
        NMEMBR = 0
        LASTAD = 0
        LOCUPY = 0
        NFAIL  = 0
        ISTATS = 1
        DO 100 I=1,MXPDS
          MDACS(I) = MOACS(I)
  100   CONTINUE
      ENDIF
C
C***********************************************************************
C AUTO-CLEAR OF VPDS (REFRESHING OF VPDS)
C***********************************************************************
C   VIRTUAL PDS ACCESS MAY BE FAIL DUE TO LACK OF MEMORY(MXVRF) OR FULL
C   OF MEMBER LIST(MXMBR). THEN FILE I/O (DIRECT PDS ACCESS) WILL BE
C   USED AS AN ALTERNATIVE WAY.
C   THE AUTO-CLEAR HAS A FUNCTION TO DUMP ALL MEMBERS IN VPDS TO PDS AND
C   CLEAR MEMORY. AFTER THAT V-PDS ACCESS WILL BE RECOVERED.
C   THE AUTO-CLEAR WILL BE PUT INTO MOTION WHEN THE FOLLOWING 
C   CONDITIONS ARE ALL SATISFIED.
C   1) ICAUTO = 1
C   2) THE NUMBER OF THE VPDS ACCESS FAILURES REACHED TO MXFAIL
C   3) LEFT AVAILABLE MEMORY FOR NEW MEMBERS IS LESS THAN LEFTAV(%)
C      OR MEMBER LIST IS FULL
C   THE AUTO-CLEAR CAN BE SUPPRESSED BY ICAUTO=0 DEFINED IN AN INCLUDE
C   FILE. MXFAIL AND LEFTAV ARE ALSO DEFINED IN THE INCLUDE FILE.
C   WHEN ICAUTO=0 AND THE TWO CONDITIONS 2) & 3) ARE SATISFIED, ACCESS
C   MODE FOR ALL VPDS WILL BE SWITCHED TO PDS TO AVOID WASTEFUL VPDS
C   SEARCH OPERATION. IF FUNC=CLAR WILL BE CALLED AFTER THAT, ACCESS 
C   MODE WILL BE RECOVERED.
C   FOR THE VPDS WITH MOSTY(J)='STAY', THE MEMBERS IN J-TH VPDS ARE 
C   NOT DUMPED. 'STAY' SHOULD BE USED FOR READ ONLY FILES.
C
C---- MEMORY IS NOT CONSUMED IN THE FOLLOWING FUNCTIONS
      IF(FUNC.EQ.'SRCH')  GOTO 1000
      IF(FUNC.EQ.'DELT')  GOTO 5000
      IF(FUNC.EQ.'DUMP')  GOTO 6000
      IF(FUNC.EQ.'COMP')  GOTO 7000
      IF(FUNC.EQ.'CLEA')  GOTO 8000
C
      IF(MDACS(IPDS).NE.'CORE') GOTO 1000
C
C-----CHECK AVAILABEL MEMORY SIZE FOR NEW MEMBERS IN VPDS
C     INCLUDING SPACE FOR GHOST MEMBERS
C
      IF(NFAIL.GE.MXFAIL) THEN
        LAVABL = 0
        DO 200 I=1,LMEMBR
          IF (MNAME(I).EQ.'        ') THEN
            LAVABL = LAVABL + MLENG(I)
          ENDIF
  200   CONTINUE
        LAVABL = LAVABL + (MXVRF - LASTAD)
        LASTSP = MXVRF - LASTAD
        VRAT1 = FLOAT(LAVABL)/FLOAT(MXVRF)*100.0
        VRAT2 = FLOAT(LASTSP)/FLOAT(MXVRF)*100.0
        VRAT3 = FLOAT(LOCUPY)/FLOAT(MXVRF)*100.0
        VRAT4 = 100.0 - (VRAT1+VRAT3)
        IF (VRAT1.LT.LEFTAV .OR. LMEMBR.GE.MXMBR) THEN
          IF(ICAUTO.EQ.1) THEN
            IF ( IPRN.GT.0 ) THEN
              WRITE(IOMSG,600)
              WRITE(IOMSG,601) NFAIL, MXMBR, LMEMBR, NMEMBR,
     &                    MXVRF, VRAT1, VRAT2, VRAT4, VRAT3
            ENDIF
            CALL PONCLA( SUBNAM, IPRN, IOMSG )
          ELSE
            IF ( IPRN.GT.0 ) THEN
              WRITE(IOMSG,610)
              WRITE(IOMSG,601) NFAIL, MXMBR, LMEMBR, NMEMBR,
     &                    MXVRF, VRAT1, VRAT2, VRAT4, VRAT3
            ENDIF
            DO 300 I=1,MXPDS
              IF(MDACS(I).EQ.'CORE') MDACS(I) = 'FILE'
  300       CONTINUE
          ENDIF
        ENDIF
      ENDIF
C
C***********************************************************************
C (SRCH) SEARCH A MEMBER FROM IPDS-TH VPDS/PDS
C***********************************************************************
C
 1000 CONTINUE
      IF ( FUNC .NE. 'SRCH' ) GOTO 2000
      IF ( IPDS.LE.0 .OR. IPDS.GT.MXPDS) THEN
        WRITE(IOMSG,620) SUBNAM, IPDS, FUNC
        STOP 999
      ENDIF
      IF ( MEMBER .EQ. '        ') THEN
        WRITE(IOMSG,621) SUBNAM, FUNC
        STOP 999
      ENDIF
C-----SERACH VPDS AND GET DATA LENGTH
      IF(MDACS(IPDS).EQ.'CORE') THEN
        CALL PONSRC( MEMBER, IPDS, IEXT, LENG, IPOS, ITOP )
        IF(IEXT.EQ.1) GOTO 9999
      ENDIF
C-----SERACH PDS AND GET DATA LENGTH
      IRC = 0
      CALL PDSLN(PDSDIR(IPDS),MEMBER,LENG,IRC)
      IF(IRC.EQ.1) THEN
        LENG = 0
        GOTO 9999
      ELSE
C-----STOP WITH ERROR MESSAGE IF IRC > 1
        CALL PDSER(SUBNAM,PDSDIR(IPDS),MEMBER,IRC,IOMSG)
      ENDIF
      GOTO 9999
C
C     LENG = 0 MEMBER NOT EXISTING IN VPDS AND PDS
C          > 0 MEMBER WHOSE DATA LENGTH=LENG IS EXISTING IN VPDS OR PDS
C
C***********************************************************************
C (READ) READ A MEMBER FROM IPDS-TH VPDS/PDS
C***********************************************************************
C
 2000 CONTINUE
      IF ( FUNC .NE. 'READ' )     GOTO 3000
      IF( IPDS.LE.0 .OR. IPDS.GT.MXPDS) THEN
        WRITE(IOMSG,620) SUBNAM, IPDS, FUNC
        STOP 999
      ENDIF
      IF ( MEMBER .EQ. '        ') THEN
        WRITE(IOMSG,621) SUBNAM, FUNC
        STOP 999
      ENDIF
      CALL PONRED( SUBNAM, IPDS, MEMBER, WORK, LENG, IPRN, IOMSG )
      IF(LENG.EQ.0) THEN
        WRITE(IOMSG,630) SUBNAM, MEMBER, PDSDIR(IPDS)
        STOP 999
      ENDIF
      GOTO 9999
C
C***********************************************************************
C (WRTP) ADD OR OVER-WRITE A MEMBER ONLY VPDS AND PDS
C***********************************************************************
C
 3000 CONTINUE
      IF ( FUNC .NE. 'WRTP' )     GOTO 4000
      IF ( IPDS.LE.0 .OR. IPDS.GT.MXPDS) THEN
        WRITE(IOMSG,620) SUBNAM, IPDS, FUNC
        STOP 999
      ENDIF
      IF ( MEMBER .EQ. '        ') THEN
        WRITE(IOMSG,621) SUBNAM, FUNC
        STOP 999
      ENDIF
      IF ( LENG.LE.0 ) THEN
        WRITE(IOMSG,640) SUBNAM, LENG
        STOP 999
      ENDIF
      CALL PONWTP( SUBNAM, IPDS, MEMBER, WORK, LENG, IPRN, IOMSG )
      GOTO 9999
C
C***********************************************************************
C (WRTV) ADD OR OVER-WRITE A MEMBER ONLY IN IPDS-TH VPDS
C***********************************************************************
C
 4000 CONTINUE
      IF ( FUNC .NE. 'WRTV' )     GOTO 5000
      IF ( IPDS.LE.0 .OR. IPDS.GT.MXPDS ) THEN
        WRITE(IOMSG,620) SUBNAM, IPDS, FUNC
        STOP 999
      ENDIF
      IF ( MEMBER .EQ. '        ') THEN
        WRITE(IOMSG,621) SUBNAM, FUNC
        STOP 999
      ENDIF
      IF ( LENG.LE.0 ) THEN
        WRITE(IOMSG,640) SUBNAM, LENG
        STOP 999
      ENDIF
      CALL PONWTV( SUBNAM, IPDS, MEMBER, WORK, LENG, IPRN, IOMSG )
      GOTO 9999
C
C***********************************************************************
C (DELT) DELETE A MEMBER FROM VPDS/PDS
C***********************************************************************
C
 5000 CONTINUE
      IF ( FUNC .NE. 'DELT' )     GOTO 6000
      IF( IPDS.LE.0 .OR. IPDS.GT.MXPDS) THEN
        WRITE(IOMSG,620) SUBNAM, IPDS, FUNC
        STOP 999
      ENDIF
      IF ( MEMBER .EQ. '        ') THEN
        WRITE(IOMSG,621) SUBNAM, FUNC
        STOP 999
      ENDIF
      IDEL = 0
      CALL  PONDEL( SUBNAM, IPDS, MEMBER, IDEL, IPRN, IOMSG )
      GOTO 9999
C
C***********************************************************************
C (DUMP) DUMP(OVER-WRITE) ALL MEMBERS IN A SPECIFIED VPDS INTO PDS
C***********************************************************************
C
 6000 CONTINUE
      IF ( FUNC .NE. 'DUMP' )     GOTO 7000
      IF( IPDS.LE.0 .OR. IPDS.GT.MXPDS) THEN
        WRITE(IOMSG,620) SUBNAM, IPDS, FUNC
        STOP 999
      ENDIF
      CALL PONDMP( SUBNAM, IPDS, IPRN, IOMSG )
      GOTO 9999
C
C***********************************************************************
C (COMP) COMPRESS MEMORY FOR VPDS
C***********************************************************************
C
 7000 CONTINUE
      IF ( FUNC .NE. 'COMP' )     GOTO 8000
      CALL PONCMP( SUBNAM, IPRN, IOMSG )
      GOTO 9999
C
C
C***********************************************************************
C (CLEA) CLEAR ALL VPDS
C***********************************************************************
C
 8000 CONTINUE
      IF ( FUNC .NE. 'CLEA' )     GOTO 9000
      IF (LMEMBR.GT.0) THEN
        LAVABL = 0
        DO 400 I=1,LMEMBR
          IF (MNAME(I).EQ.'        ') THEN
            LAVABL = LAVABL + MLENG(I)
          ENDIF
  400   CONTINUE
        LAVABL = LAVABL + (MXVRF - LASTAD)
        LASTSP = MXVRF - LASTAD
        VRAT1 = FLOAT(LAVABL)/FLOAT(MXVRF)*100.0
        VRAT2 = FLOAT(LASTSP)/FLOAT(MXVRF)*100.0
        VRAT3 = FLOAT(LOCUPY)/FLOAT(MXVRF)*100.0
        VRAT4 = 100.0 - (VRAT1+VRAT3)
        IF ( IPRN.GT.0 ) THEN
          WRITE(IOMSG,650)
          WRITE(IOMSG,601) NFAIL, MXMBR, LMEMBR, NMEMBR,
     &                    MXVRF, VRAT1, VRAT2, VRAT4, VRAT3
        ENDIF
      ENDIF
      CALL PONCLA( SUBNAM, IPRN, IOMSG )
      GOTO 9999
C
C***********************************************************************
C ERROR (OUT OF FUNCTIONS)
C***********************************************************************
C
 9000 CONTINUE
      WRITE(IOMSG,660) SUBNAM, FUNC
      STOP 999
C
C***********************************************************************
  600 FORMAT(//1H ,'<<<  MESSAGE    (PONPON)  >>>',/,1X,
     &'VIRTUAL PDS WILL BE REFRESHED DUE TO LACK OF MEMORY OR ',
     &'FULL OF MEMBER LIST')
  601 FORMAT(1X,
     &'-- NUMBER OF V-PDS ACCESS FAILURES                   =',I12,/,1X,
     &'-- NUMBER OF MAX. MEMBERS IN V-PDS                   =',I12,/,1X,
     &'-- NUMBER OF MEMBERS IN V-PDS INCLUDING DELETED ONES =',I12,/,1X,
     &'-- NUMBER OF REGISTERED MEMBERS IN V-PDS             =',I12,/,1X,
     &'-- TOTAL MEMORY SIZE FOR V-PDS (WORDS)               =',I12,/,1X,
     &'-- RATIO OF ALL LEFT AVAILABLE MEMORY SPACE (%)      =',F12.3,
     &/,1X,
     &'-- RATIO OF AVAILABLE LAST SPACE            (%)      =',F12.3,
     &/,1X,
     &'-- RATIO OF DEAD SPACE                      (%)      =',F12.3,
     &/,1X,
     &'-- RATIO OF EFFECTIVELY USED MEMORY         (%)      =',F12.3,
     &/)
  610 FORMAT(//1H ,'<<<  MESSAGE    (PONPON)  >>>',/,1X,
     &'VIRTUAL PDS FILE ACCESS WILL BE SWITCHED TO I/O ACCESS DUE TO ',
     &'LACK OF MEMORY')
  620 FORMAT(//1H ,'<<<  ERROR STOP (',A,')  >>>',/,1X,
     &'PDS FILE NUMBER(=',I4,') IS OUT OF RANGE IN ACCESS MODE(',A4,')',
     &/,1X,'CHECK AND CHANGE THE ABOVE PROGRAM')
  621 FORMAT(//1H ,'<<<  ERROR STOP (',A,')  >>>',/,1X,
     &'MEMBER NAME IS EMPTY IN ACCESS MODE(',A4,')',
     &/,1X,'CHECK AND CHANGE THE ABOVE PROGRAM')
  630 FORMAT(//1H ,'<<<  ERROR STOP (',A,')  >>>',/,1X,
     &'PDS FILE MEMBER(',A8,') WAS NOT FOUND IN READ MODE IN ',/,1X,A )
  640 FORMAT(//1H ,'<<<  ERROR STOP (',A,')  >>>',/,1X,
     &'INVALID DATA LENGTH FOR A PDS MEMBER WAS SPECIFIED IN WRITE MODE'
     &/,1X,'LENG = ',I10,/,1X,'CHECK AND CHANGE THE ABOVE PROGRAM')
  650 FORMAT(//1H ,'<<<  MESSAGE    (PONPON)  >>>',/,1X,
     &'VIRTUAL PDS FILE WILL BE CLEARED (BY CLEA MODE) ')
  660 FORMAT(//1H ,'<<<  ERROR STOP (',A,')  >>>',/,1X,
     &'INVALID FUNCTION (',A4,') WAS SELECTED IN PDS FILE ACCESS ',/,1X,
     &'CHECK AND CHANGE THE ABOVE PROGRAM')
C
 9999 RETURN
      END
