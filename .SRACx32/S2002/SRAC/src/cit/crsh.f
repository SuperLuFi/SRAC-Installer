CCRSH -82.1 ***CITATION*** CONTROLS DIMENSION SEARCH / CF-EIGN
C
      SUBROUTINE CRSH(RVOL,PVOL,LVX)
C
CDEL  INTEGER RGX , MSX , ZNEX , ZDX , WZX
CDEL  PARAMETER ( RGX=100, MSX=211, ZDX=200, ZNEX=1000, WZX=100 )
      INCLUDE  'CITPMINC'
C
      COMMON/ALSUB/BLSUB(30),TITL1(18),TITL2(18),IMAX,JMAX,KBMAX,KMAX,
     & LMAX,MMAX, NMAX,IMXP1,JMXP1,KBMXP1,NSETMX,NTO,MM1VX,KM1VX,IOIN,
     & IOUT,IOSIG,IOFLX,IO1,IO2,IO3,IO4,IO7,NER(100), IX(200),INNO(100),
     &  NGC(24),IEDG(24),ITMX(24),TIMX(6), GLIM(6),NDPL(24),IEDP1(24),
     & IEDP2(24),IEDP3(24), DPLH(6),NUAC(24),EPI(6),XMIS(6),NSRH(24),
     & XSRH1(6), XTR1(WZX),XTR2(WZX),NXTR1(WZX),NXTR2(WZX),SPARE(200),
     & IXPUT(200),XPUT(200)
      COMMON/AFLUX/BFLUX(30),KXMN8,NIT,NIIT,NIIIT,JXP1,KSCT1,KSCT2,
     & ISTART,IEP, VRGP1,VRGP2,VRGP3,VRG1,VRG2,VRGK1,VRGK2,XABS,PROD,
     & XLEK,RMX,RMN,XKEF1,XKEF2,XKEF3,EXFC1,EXFC2,EXFC3, NI3,IEXTR,
     & IRECV,VRGABS,LO3,LO4,XLAMDB,EPI1,EPI2, BETTA,SUMXI,IX25,IX28,I,J,
     &  KB,K,ITMAX,ITIME, BET(MSX),DEL(MSX)
      COMMON/ABURN/BBURN(30),NSIG1(50),NSIG2(50),NSIG3(50),N1N2R(2,ZDX),
     &  NSIG4(50),NSIG5(50),NSIG6(50),NJM(50),NJMM(50),NJNQ(50),NCH(50),
     &  NZON(ZDX),NXSET(ZDX),NXODR(ZDX),IDXSET(ZDX),NCLASS(ZDX),NDP(ZDX)
     &  , XNAME(3,ZDX)
      COMMON/ASRCH/ BSRCH(30),XK1,XK2,XK3,XN1,XN2,XN3, DELK1,DELK2,
     & DELK3,BATTY,DRV,TBF,GWC,EK2,RCCM,DNDK(5), NSC(5),NSCN,NXZ,NXN,
     & NXM,NXS,INIL,INIU,INID
      COMMON/AMESH/BMESH(30),NREGI,NREGJ,NREGKB,XSHI(RGX),XSHJ(RGX),
     & XSHKB(RGX), MSHI(RGX),MSHJ(RGX),MSHKB(RGX),Y(MSX),YY(MSX), X(MSX)
     &  ,XX(MSX),Z(MSX),ZZ(MSX), ZONVOL(ZNEX),AVZPD(ZNEX),PDI(MSX),
     & PDJ(MSX) , PDK(MSX)
C
      DIMENSION RVOL(LVX),PVOL(LVX)
C
      IO18 = IX(85)
      REWIND IO18
      READ(IO18) NXJ,NXI,NXKB,INDX,INGX,IDUM,IDUM,XMX
      IND = 0
      INEG = 0
      RCCM = 1.0
      NOB = NSRH(10)
      NOUT = NSRH(24)
      IF (IX(73).EQ.2) GO TO 104
      XK1 = XK2
      XK2 = XK3
      XK3 = XKEF1
      XN1 = XN2
      XN2 = XN3
      GO TO (100,101,102),INGX
  100 XN3 = XSHJ(INDX)
      GO TO 103
  101 XN3 = XSHI(INDX)
      GO TO 103
  102 XN3 = XSHKB(INDX)
  103 CONTINUE
  104 CONTINUE
      IF (IX(73).LE.1) SPARE(65) = 0.0
      IF (IX(73).LE.2) GO TO 106
      S60 = DRV
      DIF = XK3 - XK2
      IF ((ABS(S60).GT.1.0E-4).AND.(ABS(DIF).GT.1.0E-4)) GO TO 105
      GO TO 106
  105 SPARE(65) = DIF/S60
  106 CONTINUE
      DELK3 = DELK2
      DELK2 = DELK1
      DELK1 = ABS(XKEF1/XSRH1(1) - 1.0)
      SPARE(58) = 0.0
      IF (IX(73)-2) 107,116,117
  107 CONTINUE
C***********************************************************************
C     FIRST TIME IN - K FOR BASE CASE HAS BEEN CALCULATED
C***********************************************************************
      IF (DELK1.GE.EPI2) GO TO 108
      IX(75) = 1
      WRITE(IOUT,1000)
      GO TO 145
  108 CONTINUE
C
C     LOOK FOR ESTIMATE OF NDK/DN - IF NONE AVAILABLE USE BUILT-IN
C      PROCEDURE
C
C****
      IF (NSCN.LE.0) GO TO 110
      DO 109 N=1,NSCN
      IF (NSC(N).NE.NSRH(1)) GO TO 109
      QQ = DNDK(N)
      GO TO 111
  109 CONTINUE
  110 QQ = XSRH1(3)
  111 IF (QQ.EQ.0.0) GO TO 112
      IX(130) = 1
      GO TO 113
  112 IX(130) = 0
  113 CONTINUE
C****
      BATTY = BETTA
      IX(70) = 0
      IX(74) = 1
      IX(126) = 0
      SPARE(60) = 0.2
      SPARE(61) = 1.0
      SPARE(62) = 0.0
C
C     DETERMINE INITIAL SEARCH DRIVING FACTOR
C
      T1 = XN3
      IF (IX(130).GT.0) GO TO 114
      IF (XKEF1.GT.XSRH1(1)) SPARE(60) = (-SPARE(60))
      GO TO 115
  114 CONTINUE
      SPARE(60) = (XSRH1(1) - XKEF1)/QQ
  115 CONTINUE
      SPARE(62) = SPARE(60)*T1/XMX
      GWC = SPARE(62)
      IF (NOUT.LT.0) WRITE(IOUT,1001) INGX,INDX,SPARE(60),SPARE(62),
     & XKEF1,XSRH1(1),QQ,T1,XMX
      GO TO 131
  116 CONTINUE
C***********************************************************************
C     SECOND TIME IN - K WITH UPDATED DIMENSIONS HAS BEEN CALCULATED
C      WITH ONE ITERATION IN FLUX OR KLUX
C***********************************************************************
      IF (IX(74).EQ.0) GO TO 127
      GO TO 125
  117 CONTINUE
C***********************************************************************
C     THIRD ETC. TIME IN -
C***********************************************************************
      IF (DELK1.GE.EPI2) GO TO 122
C
C     EXCELSIOR - WE ARE DONE
C
      IX(75) = 1
      IND = 1
      BETTA = BATTY
      WRITE(IOUT,1002)
      IF (NOUT.LT.0) WRITE(IOUT,1003) SPARE(60),SPARE(61),SPARE(62)
C
C     SAVE ESTIMATE OF NDK/DN FOR POSSIBLE LATER USE
C
      QF = (XK3 - XK2)/SPARE(60)
      IF (SPARE(65).EQ.0.0) SPARE(65) = QF
C****
      IF (NSCN.GT.0) GO TO 118
      NSCN = 1
      NSC(NSCN) = NSRH(1)
      DNDK(NSCN) = SPARE(65)
      GO TO 121
  118 DO 119 N=1,NSCN
      IF (NSC(N).EQ.NSRH(1)) GO TO 120
  119 CONTINUE
      NSCN = NSCN + 1
      IF (NSCN.GT.5) NSCN = 5
      NSC(NSCN) = NSRH(1)
      DNDK(NSCN) = SPARE(65)
      GO TO 121
  120 CONTINUE
      DNDK(N) = SPARE(65)
  121 CONTINUE
C****
      WRITE(IOUT,1004) SPARE(65),QF
      GO TO 138
  122 CONTINUE
      IX(126) = 0
      IF (DELK1.GE.DELK3) IX(126) = 1
      IF (IX(73).GT.4.AND.IX(126).EQ.1) IX(74) = 0
      T1 = ABS(XKEF1 - EK2)/EK2
      IF (T1.GT.1.0E-5) GO TO 124
      SPARE(60) = 2.0*SPARE(60)
      IF (ABS(SPARE(60)).LE.1.0E-6.AND.SPARE(60).LT.0.0) GO TO 123
      SPARE(60) = 1.0E-5
      GO TO 129
  123 CONTINUE
      SPARE(60) = (-1.0E-5)
      GO TO 129
  124 CONTINUE
      IF (IX(74).EQ.0) GO TO 127
      IF (IX(73).GT.3) GO TO 130
  125 CONTINUE
C
C     TWO POINT APPROXIMATION
C
      B = DRV /((1.0+DRV)/XKEF1 - 1.0/EK2)
      IF (ABS(B).GT.1.0E+4) GO TO 126
      C = (B/EK2 - 1.0)/(1.0 + DRV)
      SPARE(60) = C*XSRH1(1)/(B - XSRH1(1)) - 1.0
      IF (SPARE(60).GT.0.0.AND.XKEF1.LT.XSRH1(1).AND.EK2.LT.XSRH1(1))
     & GO TO 127
      IF (SPARE(60).GT.0.0.AND.XKEF1.GT.XSRH1(1).AND.EK2.GT.XSRH1(1))
     & GO TO 127
      IF (SPARE(60).LE.(-1.0)) GO TO 126
      IF (NOUT.LT.0) WRITE(IOUT,1005)
      GO TO 128
  126 CONTINUE
C     IX(74) = 0
  127 CONTINUE
C
C     LINEAR APPROXIMATION
C
      IF (NOUT.LT.0) WRITE(IOUT,1006)
      SPARE(60) = DRV*(XSRH1(1)-XKEF1)/((1.0+DRV)*(XKEF1-EK2))
  128 CONTINUE
      IF (NOUT.LT.0) WRITE(IOUT,1007) IX(73),IX(74),SPARE(60),DRV,XKEF1,
     &  EK2,B,C
  129 CONTINUE
      GO TO 131
  130 CONTINUE
C
C     THREE POINT APPROXIMATION
C
      IF (NOUT.LT.0) WRITE(IOUT,1008) XN3,XN2,XN1,XK3,XK2,XK1
      C1 = (XN1 - XN3)/(XN1 - XN2)
      C2 = XK1/XK2
      C3 = XK1/XK3
      C4 = C3 - 1.0 - C1*(C2 - 1.0)
      IF (ABS(C4).LT.1.0E-4) GO TO 126
      C = (C1*(XN1 - C2*XN2) - XN1 + C3*XN3)/C4
      C1 = (XN2 - C)/(XN1 - C)
      C5 = 1.0 - C2*C1
      IF (ABS(C5).LT.1.0E-4) GO TO 126
      B = (XK1*(1.0 - C1))/C5
      A = (XN1 - C)*(B - XK1)/XK1
      XND = C + A*XSRH1(1)/(B - XSRH1(1))
      SPARE(60) = XND/XN3 - 1.0
      IF (NOUT.LT.0) WRITE(IOUT,1009)
      IF (NOUT.LT.0) WRITE(IOUT,1010) IX(73),IX(74),SPARE(60),A,B,C,C4,
     & C5,XND
  131 CONTINUE
      IF (IX(73).GT.1) SPARE(62) = TBF*(SPARE(60)*(1.0 + 1.0/DRV))
      SPARE(61) = SPARE(61)*(1.0 + SPARE(60))
      IF (NOUT.LT.0) WRITE(IOUT,1011) SPARE(60),SPARE(61),SPARE(62)
C
C     UPDATE SEARCH DIMENSIONS
C
      IF (NXJ.LE.0) GO TO 133
      READ(IO18) (XTR1(J),J=1,NXJ)
      DO 132 J=1,NXJ
      IF (XTR1(J).EQ.0.0) GO TO 132
      T1 = XSHJ(J)
      T7 = T1 + SPARE(62)*XTR1(J)
      XSHJ(J) = T7
      IF (T7.LE.0.0) INEG = 1
  132 CONTINUE
  133 IF (NXI.LE.0) GO TO 135
      READ(IO18) (XTR1(I),I=1,NXI)
      DO 134 I=1,NXI
      IF (XTR1(I).EQ.0.0) GO TO 134
      T1 = XSHI(I)
      T7 = T1 + SPARE(62)*XTR1(I)
      XSHI(I) = T7
      IF (T7.LE.0.0) INEG = 1
  134 CONTINUE
  135 IF (NXKB.LE.0) GO TO 137
      READ(IO18) (XTR1(KB),KB=1,NXKB)
      DO 136 KB=1,NXKB
      IF (XTR1(KB).EQ.0.0) GO TO 136
      T1 = XSHKB(KB)
      T7 = T1 + SPARE(62)*XTR1(KB)
      XSHKB(KB) = T7
      IF (T7.LE.0.0) INEG = 1
  136 CONTINUE
  137 CONTINUE
  138 CONTINUE
      CALL MASH(RVOL,PVOL,LVX,IND,NOUT,INEG)
      IF (IND.GT.0) GO TO 142
      IF (INEG.LE.0) GO TO 139
      WRITE(IOUT,1013)
      STOP
  139 CONTINUE
  140 CONTINUE
      IF (IX(73).EQ.2) GO TO 141
      EK2 = XKEF1
      DRV = SPARE(60)
      TBF = SPARE(62)
      GO TO 142
  141 CONTINUE
      TBF = GWC + GWC*(SPARE(60)*(1.0 + 1.0/DRV))
      DRV = (SPARE(60) + 1.0)*(DRV + 1.0) - 1.0
  142 CONTINUE
      IF (NOUT.LT.0) WRITE(IOUT,1012) IX(73),EK2,DRV,TBF
      J2 = ICLOCK(0)
      JJ = (J2 - IX(127))/6000
      IF (IX(75).EQ.1) GO TO 145
C
C     NOT CONVERGED BUT SET FLAG TO WRITE FLUXES IF ITERATION COUNT
C      OR TIME LIMIT HAS BEEN EXCEEDED
C
      IF (IX(73).GE.NSRH(3)) IX(70) = 1
      IF (JJ.GE.ITMX(21)) IX(70) = (-1)
      IF (IX(70)) 143,145,144
  143 WRITE(IOUT,1014)
      GO TO 145
  144 WRITE(IOUT,1015)
  145 CONTINUE
      IF (NOUT.LT.0) WRITE(IOUT,1016) IX(70),IX(73),IX(74),IX(75),
     & IX(126),IX(130)
C
C     WHEN USING ESTIMATE OF NDK/DN - I.E. IX(130) = 1 ,
C     COUNTER MUST BE INCREMENTED - DONE IN DASH OR KASH
C
      REWIND IO18
      RETURN
 1000 FORMAT(1H0,'NO SEARCH REQUIRED - MULTIPLICATION FACTOR SATISFIED')
 1001 FORMAT(' DB 1',2I5,1P7E13.5)
 1002 FORMAT(1H0,'INNER REACTIVITY LOOP SEARCH CONVERGED')
 1003 FORMAT(' DB 4',1P3E15.6)
 1004 FORMAT(1H0,'ESTIMATE OF N(DK/DN) SAVED',1PE15.6, '  FINAL',
     & 1PE15.6)
 1005 FORMAT(1H ,'USING TWO POINT NON-LINEAR APPROXIMATION')
 1006 FORMAT(1H ,'USING LINEAR APPROXIMATION')
 1007 FORMAT(' DB 6',2I5,1P6E15.6)
 1008 FORMAT(1H ,'C(N)=',1PE15.6,' C(N-1)=',1PE15.6,' C(N-2)=',1PE15.6 /
     &  1H ,'K(N)=',1PE15.6,' K(N-1)=',1PE15.6,' K(N-2)=',1PE15.6)
 1009 FORMAT(1H ,'USING THREE POINT NON-LINEAR APPROXIMATION')
 1010 FORMAT(' DB 8',2I5,1P7E15.6)
 1011 FORMAT(' DB 9',' DIMENSIONS UPDATED WITH',1P3E15.6)
 1012 FORMAT(' DB10',I5,1P3E15.6)
 1013 FORMAT(1H0,'SEARCH DIMENSION LESS THAN OR EQUAL TO ZERO - STOP')
 1014 FORMAT(1H0,'INNER REACTIVITY LOOP SEARCH TIME LIMIT EXCEEDED')
 1015 FORMAT(1H0,
     & 'INNER REACTIVITY LOOP SEARCH ITERATION LIMIT EXCEEDED')
 1016 FORMAT(' DB13',' IX(70)=',I5,' IX(73)=',I5,' IX(74)=',I5,
     & ' IX(75)=',I5,' IX(126)=',I5,' IX(130)=',I5)
      END
