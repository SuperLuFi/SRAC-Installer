CDISH --082 ***CITATION*** CONTROLS INDIRECT SEARCH / CF-FLUX,KLUX
C
      SUBROUTINE DISH(SS1,SS2,CONC,NJJR,SS4, KVX,MVX,NVX,NSETVX)
C
CDEL  INTEGER RGX , MSX , ZNEX , ZDX , WZX
CDEL  PARAMETER ( RGX=100, MSX=211, ZDX=200, ZNEX=1000, WZX=100 )
      INCLUDE  'CITPMINC'
C
      COMMON/ALSUB/BLSUB(30),TITL1(18),TITL2(18),IMAX,JMAX,KBMAX,KMAX,
     & LMAX,MMAX, NMAX,IMXP1,JMXP1,KBMXP1,NSETMX,NTO,MM1VX,KM1VX,IOIN,
     & IOUT,IOSIG,IOFLX,IO1,IO2,IO3,IO4,IO7,NER(100), IX(200),INNO(100),
     &  NGC(24),IEDG(24),ITMX(24),TIMX(6), GLIM(6),NDPL(24),IEDP1(24),
     & IEDP2(24),IEDP3(24), DPLH(6),NUAC(24),EPI(6),XMIS(6),NSRH(24),
     & XSRH1(6), XTR1(WZX),XTR2(WZX),NXTR1(WZX),NXTR2(WZX),SPARE(200),
     & IXPUT(200),XPUT(200)
      COMMON/AFLUX/BFLUX(30),KXMN8,NIT,NIIT,NIIIT,JXP1,KSCT1,KSCT2,
     & ISTART,IEP, VRGP1,VRGP2,VRGP3,VRG1,VRG2,VRGK1,VRGK2,XABS,PROD,
     & XLEK,RMX,RMN,XKEF1,XKEF2,XKEF3,EXFC1,EXFC2,EXFC3, NI3,IEXTR,
     & IRECV,VRGABS,LO3,LO4,XLAMDB,EPI1,EPI2, BETTA,SUMXI,IX25,IX28,I,J,
     &  KB,K,ITMAX,ITIME, BET(MSX),DEL(MSX)
      COMMON/ABURN/BBURN(30),NSIG1(50),NSIG2(50),NSIG3(50),N1N2R(2,ZDX),
     &  NSIG4(50),NSIG5(50),NSIG6(50),NJM(50),NJMM(50),NJNQ(50),NCH(50),
     &  NZON(ZDX),NXSET(ZDX),NXODR(ZDX),IDXSET(ZDX),NCLASS(ZDX),NDP(ZDX)
     & , XNAME(3,ZDX)
      COMMON/ASRCH/ BSRCH(30),XK1,XK2,XK3,XN1,XN2,XN3, DELK1,DELK2,
     & DELK3,BATTY,DRV,TBF,GWC,EK2,RCCM,DNDK(5), NSC(5),NSCN,NXZ,NXN,
     & NXM,NXS,INIL,INIU,INID
      DIMENSION SS1(KVX,NVX,NSETVX),SS2(KVX,NVX,NSETVX),CONC(NVX,MVX),
     & NJJR(NVX,NSETVX)
      DIMENSION SS4(KVX,NVX,NSETVX)
C
      INEG = 0
      RCCM = 1.0
      Q = XSRH1(2)
      NOB = NSRH(10)
      NOUT = NSRH(24)
      IO18 = IX(85)
      IF (NOB.EQ.(-1)) REWIND IO18
      IF (NOB.EQ.(-1)) READ(IO18) NXZ,NXN,NXM,NXS,IDUM,RCCM
      IF (NOB.EQ.(-1)) READ(IO18) (NXTR1(I),I=1,NXZ)
      IF (IX(73).EQ.2) GO TO 100
      XK1 = XK2
      XK2 = XK3
      XK3 = XKEF1
      XN1 = XN2
      XN2 = XN3
      IF (IX(73).GT.1) XN3 = CONC(NXN,NXM)
  100 CONTINUE
      IF(IX(73).LE.1)  SPARE(65) = 0.0
      IF (IX(73).LE.2) GO TO 102
      S60 = DRV
      DIF = XK3 - XK2
      IF ((ABS(S60).GT.1.0E-4).AND.(ABS(DIF).GT.1.0E-4)) GO TO 101
      GO TO 102
  101 SPARE(65) = DIF/S60
  102 CONTINUE
      DELK3 = DELK2
      DELK2 = DELK1
      DELK1 = ABS(XKEF1/XSRH1(1) - 1.0)
      SPARE(58) = 0.0
      IF (IX(73)-2) 103,137,138
  103 CONTINUE
C***********************************************************************
C     FIRST TIME IN - K FOR BASE CASE HAS BEEN CALCULATED
C***********************************************************************
      IF (DELK1.GE.EPI2) GO TO 104
      IX(75) = 1
      WRITE(IOUT,1000)
      GO TO 159
  104 CONTINUE
C
C     LOOK FOR ESTIMATE OF NDK/DN - IF NONE AVAILABLE USE BUILT-IN
C      PROCEDURE
C
C****
      IF (NSCN.LE.0) GO TO 106
      DO 105 N=1,NSCN
      IF (NSC(N).NE.NSRH(1)) GO TO 105
      QQ = DNDK(N)
      GO TO 107
  105 CONTINUE
  106 QQ = XSRH1(3)
  107 IF (QQ.EQ.0.0) GO TO 108
      IX(130) = 1
      GO TO 109
  108 IX(130) = 0
  109 CONTINUE
C****
      BATTY = BETTA
      IX(70) = 0
      IX(74) = 1
      IX(126) = 0
      SPARE(60) = 0.2
      SPARE(61) = 1.0
      SPARE(62) = 0.0
      T1 = 0.0
      ASSIGN 133 TO KAFLSM
      IF (NOB.EQ.(-1)) GO TO 132
      ASSIGN 122 TO JHCOAC
      ASSIGN 121 TO NWDIG
      INIL = 12
      INIU = 16
      INID = 18
      IF (NSRH(19).GT.0) INID = 16
      IF (NSRH(19).EQ.0) INIU = 18
  110 DO 128 M = 1,MMAX
      NS = NXSET(M)
      NR = NXODR(NS)
      NSX = NSIG2(NR)
      IF ((IX(44).EQ.0).AND.(IX(49).EQ.0)) GO TO 112
      IF (IX(49).GT.0) GO TO 111
      IF ((M.EQ.IX(44)).OR.(M.EQ.IX(45)).OR.(M.EQ.IX(46))
     & .OR.(M.EQ.IX(47)).OR.(M.EQ.IX(48))) GO TO 112
      GO TO 128
  111 IF (IX(49).NE.NCLASS(M)) GO TO 128
  112 CONTINUE
      T5 = 0.0
      T6 = 0.0
      GO TO NWDIG, (121,113,116)
  113 CONTINUE
C
C     OPTION 1 - FIRST DIRECT AND FIRST INDIRECT
C
      DO 115 N=1,NSX
      IF (NJJR(N,NR).NE.NSRH(INIL)) GO TO 114
      T5 = CONC(N,M)
      GO TO 115
  114 CONTINUE
      IF (NJJR(N,NR).NE.NSRH(INID+1)) GO TO 115
      T6 = CONC(N,M)
  115 CONTINUE
      GO TO 120
  116 CONTINUE
C
C     OPTION 2 - SUM OF DIRECT AND SUM OF INDIRECT
C
      DO 119 N=1,NSX
      DO 118 INI=INIL,INIU
      IF (NJJR(N,NR).NE.NSRH(INI)) GO TO 118
      IF (INI.GT.INID) GO TO 117
      T5 = T5 + CONC(N,M)
      GO TO 118
  117 CONTINUE
      T6 = T6 + CONC(N,M)
  118 CONTINUE
  119 CONTINUE
  120 CONTINUE
      Z = 0.0
      IF (T6.NE.0.0) Z = (-SPARE(60))*T5/T6
  121 CONTINUE
      DO 127 N=1,NSX
      DO 126 INI=INIL,INIU
      IF (NJJR(N,NR).NE.NSRH(INI)) GO TO 126
      GO TO JHCOAC, (122,123)
  122 CONTINUE
C
C     FIND LARGEST CONCENTRATION OF SEARCH NUCLIDE(DIRECT) IN SYSTEM
C
      IF (CONC(N,M).LE.T1) GO TO 126
      T1 = CONC(N,M)
      NXN = N
      NXM = M
      NXS = NR
      GO TO 126
  123 CONTINUE
C
C     UPDATE SEARCH NUCLIDE CONCENTRATIONS
C
      T1 = CONC(N,M)
      IF (INI.GT.INID) GO TO 124
      T7 = (1.0 + SPARE(60))*T1
      GO TO 125
  124 CONTINUE
      T7 = (1.0 + Z*Q)*T1
  125 CONTINUE
      CONC(N,M) = T7
      SPARE(58) = AMAX1(SPARE(58),T7)
      IF (T7.LT.0.0) INEG = 1
  126 CONTINUE
  127 CONTINUE
  128 CONTINUE
      GO TO 132
  129 CONTINUE
C
C     UPDATE SEARCH NUCLIDE CONCENTRATIONS AS PER RELATIVE CONCENTRATION
C      CHANGE INPUT
C
      DO 131 MM=1,NXZ
      M = NXTR1(MM)
      NS = NXSET(M)
      NR = NXODR(NS)
      NSX = NSIG2(NR)
      READ(IO18) (XTR1(N),N=1,NSX)
      DO 130 N=1,NSX
      IF (XTR1(N).EQ.0.0) GO TO 130
      T1 = CONC(N,M)
      T7 = T1 + SPARE(62)*XTR1(N)
      CONC(N,M) = T7
      SPARE(58) = AMAX1(SPARE(58),T7)
      IF (T7.LT.0.0) INEG = 1
  130 CONTINUE
  131 CONTINUE
  132 CONTINUE
      GO TO KAFLSM, (133,153)
  133 CONTINUE
C
C     DETERMINE INITIAL SEARCH DRIVING FACTOR
C
      XN3 = CONC(NXN,NXM)
      IF (NOB.EQ.(-1)) T1 = XN3
      IF (IX(130).GT.0) GO TO 135
      T3 = 0.0
      DO 134 K=1,KMAX
      IF (SS1(K,NXN,NXS).GT.T3) T3 = SS1(K,NXN,NXS)
  134 CONTINUE
      T30 = SS2(KMAX,NXN,NXS)*SS4(KMAX,NXN,NXS)-SS1(KMAX,NXN,NXS)
      T4 = 0.0001
      IF (T3.NE.0.0.AND.T1.NE.0.0) T4 = T1*T3
      IF ((1.2*T4-0.0001).LT.0.0) SPARE(60) = 0.0001/T4 - 1.0
      IF (T30.GT.0.0) SPARE(60) = (-SPARE(60))
      IF (XKEF1.LE.XSRH1(1)) SPARE(60) = (-SPARE(60))
      GO TO 136
  135 CONTINUE
      SPARE(60) = (XSRH1(1) - XKEF1)/QQ
  136 CONTINUE
      SPARE(62) = SPARE(60)*T1/RCCM
      GWC = SPARE(62)
      IF (NOUT.LT.0) WRITE(IOUT,1001) NXN,NXM,NXS,NJJR(NXN,NXS),T1,T3,
     & T30,T4,SPARE(60)
      GO TO 152
  137 CONTINUE
C***********************************************************************
C     SECOND TIME IN - K WITH UPDATED CONCENTRATIONS HAS BEEN
C      CALCULATED WITH ONE ITERATION IN FLUX OR KLUX
C***********************************************************************
      IF (IX(74).EQ.0) GO TO 148
      GO TO 146
  138 CONTINUE
C***********************************************************************
C     THIRD ETC. TIME IN -
C***********************************************************************
      IF (DELK1.GE.EPI2) GO TO 143
C
C     EXCELSIOR - WE ARE DONE
C
      IX(75) = 1
      BETTA = BATTY
      WRITE(IOUT,1002)
      IF (NOUT.LT.0) WRITE(IOUT,1003) SPARE(60),SPARE(61),SPARE(62)
C
C     SAVE ESTIMATE OF NDK/DN FOR POSSIBLE LATER USE
C
      QF = (XK3 - XK2)/SPARE(60)
      IF(SPARE(65).EQ.0.0) SPARE(65) = QF
C****
      IF (NSCN.GT.0) GO TO 139
      NSCN = 1
      NSC(NSCN) = NSRH(1)
      DNDK(NSCN) = SPARE(65)
      GO TO 142
  139 DO 140 N=1,NSCN
      IF (NSC(N).EQ.NSRH(1)) GO TO 141
  140 CONTINUE
      NSCN = NSCN + 1
      IF (NSCN.GT.5) NSCN = 5
      NSC(NSCN) = NSRH(1)
      DNDK(NSCN) = SPARE(65)
      GO TO 142
  141 CONTINUE
      DNDK(N) = SPARE(65)
  142 CONTINUE
C****
      WRITE(IOUT,1004) SPARE(65),QF
      GO TO 155
  143 CONTINUE
      IX(126) = 0
      IF (DELK1.GE.DELK3) IX(126) = 1
      IF (IX(73).GT.4.AND.IX(126).EQ.1) IX(74) = 0
      T1 = ABS(XKEF1 - EK2)/EK2
      IF (T1.GT.1.0E-5) GO TO 145
      SPARE(60) = 2.0*SPARE(60)
      IF (ABS(SPARE(60)).LE.1.0E-6.AND.SPARE(60).LT.0.0) GO TO 144
      SPARE(60) = 1.0E-5
      GO TO 150
  144 CONTINUE
      SPARE(60) = (-1.0E-5)
      GO TO 150
  145 CONTINUE
      IF (IX(74).EQ.0) GO TO 148
      IF (IX(73).GT.3) GO TO 151
  146 CONTINUE
C
C     TWO POINT APPROXIMATION
C
      B = DRV /((1.0+DRV)/XKEF1 - 1.0/EK2)
      IF (ABS(B).GT.1.0E+4) GO TO 147
      C = (B/EK2 - 1.0)/(1.0 + DRV)
      SPARE(60) = C*XSRH1(1)/(B - XSRH1(1)) - 1.0
      IF (SPARE(60).GT.0.0.AND.XKEF1.LT.XSRH1(1).AND.EK2.LT.XSRH1(1))
     & GO TO 148
      IF (SPARE(60).GT.0.0.AND.XKEF1.GT.XSRH1(1).AND.EK2.GT.XSRH1(1))
     & GO TO 148
      IF (SPARE(60).LE.(-1.0)) GO TO 147
      IF (NOUT.LT.0) WRITE(IOUT,1005)
      GO TO 149
  147 CONTINUE
C     IX(74) = 0
  148 CONTINUE
C
C     LINEAR APPROXIMATION
C
      IF (NOUT.LT.0) WRITE(IOUT,1006)
      SPARE(60) = DRV*(XSRH1(1)-XKEF1)/((1.0+DRV)*(XKEF1-EK2))
  149 CONTINUE
      IF (NOUT.LT.0) WRITE(IOUT,1007) IX(73),IX(74),SPARE(60),DRV,XKEF1,
     & EK2,B,C
  150 CONTINUE
      GO TO 152
  151 CONTINUE
C
C     THREE POINT APPROXIMATION
C
      IF (NOUT.LT.0) WRITE(IOUT,1008) XN3,XN2,XN1,XK3,XK2,XK1
      C1 = (XN1 - XN3)/(XN1 - XN2)
      C2 = XK1/XK2
      C3 = XK1/XK3
      C4 = C3 - 1.0 - C1*(C2 - 1.0)
      IF (ABS(C4).LT.1.0E-4) GO TO 147
      C = (C1*(XN1 - C2*XN2) - XN1 + C3*XN3)/C4
      C1 = (XN2 - C)/(XN1 - C)
      C5 = 1.0 - C2*C1
      IF (ABS(C5).LT.1.0E-4) GO TO 147
      B = (XK1*(1.0 - C1))/C5
      A = (XN1 - C)*(B - XK1)/XK1
      XND = C + A*XSRH1(1)/(B - XSRH1(1))
      SPARE(60) = XND/XN3 - 1.0
      IF (NOUT.LT.0) WRITE(IOUT,1009)
      IF (NOUT.LT.0) WRITE(IOUT,1010) IX(73),IX(74),SPARE(60),A,B,C,C4,
     & C5,XND
  152 CONTINUE
      IF (IX(73).GT.1) SPARE(62) = TBF*(SPARE(60)*(1.0 + 1.0/DRV))
      SPARE(61) = SPARE(61)*(1.0 + SPARE(60))
      IF (NOUT.LT.0) WRITE(IOUT,1011) SPARE(60),SPARE(61),SPARE(62)
      ASSIGN 153 TO KAFLSM
      IF (NOB.EQ.(-1)) GO TO 129
      ASSIGN 123 TO JHCOAC
      IF (NSRH(19).EQ.0) ASSIGN 121 TO NWDIG
      IF (NSRH(19).EQ.1) ASSIGN 113 TO NWDIG
      IF (NSRH(19).EQ.2) ASSIGN 116 TO NWDIG
      INIL = 12
      INIU = 18
      GO TO 110
  153 CONTINUE
      IF (IX(73).EQ.2) GO TO 154
      EK2 = XKEF1
      DRV = SPARE(60)
      TBF = SPARE(62)
      GO TO 155
  154 CONTINUE
      TBF = GWC + GWC*(SPARE(60)*(1.0 + 1.0/DRV))
      DRV = (SPARE(60) + 1.0)*(DRV + 1.0) - 1.0
  155 CONTINUE
      IF (NOUT.LT.0) WRITE(IOUT,1012) IX(73),EK2,DRV,TBF
      IF (INEG.EQ.0) GO TO 156
      IF (NSRH(21).GT.0) GO TO 156
      WRITE(IOUT,1013)
      CALL DIRT(CONC,NJJR,MVX,NVX,NSETVX,NXZ)
      STOP
  156 CONTINUE
      IF (NOUT.NE.0) CALL DIRT(CONC,NJJR,MVX,NVX,NSETVX,NXZ)
      J2 = ICLOCK(0)
      JJ = (J2 - IX(127))/6000
      IF (IX(75).EQ.1) GO TO 159
C
C     NOT CONVERGED BUT SET FLAG TO WRITE FLUXES IF ITERATION COUNT
C      OR TIME LIMIT HAS BEEN EXCEEDED
C
      IF (IX(73).GE.NSRH(3)) IX(70) = 1
      IF (JJ.GE.ITMX(21)) IX(70) = (-1)
      IF (IX(70)) 157,159,158
  157 WRITE(IOUT,1014)
      GO TO 159
  158 WRITE(IOUT,1015)
  159 CONTINUE
      IF (NOUT.LT.0) WRITE(IOUT,1016) IX(70),IX(73),IX(74),IX(75),
     & IX(126),IX(130)
      IF (NOB.EQ.(-1)) REWIND IO18
C
C     WHEN USING ESTIMATE OF NDK/DN - I.E. IX(130) = 1 ,
C     COUNTER MUST BE INCREMENTED - DONE IN DASH OR KASH
C
      RETURN
 1000 FORMAT(1H0,'NO SEARCH REQUIRED - MULTIPLICATION FACTOR SATISFIED')
 1001 FORMAT(' DB 1',4I5,1P5E15.6)
 1002 FORMAT(1H0,'INNER REACTIVITY LOOP SEARCH CONVERGED')
 1003 FORMAT(' DB 4',1P3E15.6)
 1004 FORMAT(1H0,'ESTIMATE OF N(DK/DN) SAVED',1PE15.6, '  FINAL',
     & 1PE15.6)
 1005 FORMAT(1H ,'USING TWO POINT NON-LINEAR APPROXIMATION')
 1006 FORMAT(1H ,'USING LINEAR APPROXIMATION')
 1007 FORMAT(' DB 6',2I5,1P6E15.6)
 1008 FORMAT(1H ,'C(N)=',1PE15.6,' C(N-1)=',1PE15.6,' C(N-2)=',1PE15.6 /
     & 1H ,'K(N)=',1PE15.6,' K(N-1)=',1PE15.6,' K(N-2)=',1PE15.6)
 1009 FORMAT(1H ,'USING THREE POINT NON-LINEAR APPROXIMATION')
 1010 FORMAT(' DB 8',2I5,1P7E15.6)
 1011 FORMAT(' DB 9',' CONCENTRATIONS UPDATED WITH',1P3E15.6)
 1012 FORMAT(' DB10',I5,1P3E15.6)
 1013 FORMAT('0**** SEARCH CONCENTRATION NEGATIVE **** STOP OPTION SP',
     &'ECIFIED ****')
 1014 FORMAT(1H0,'INNER REACTIVITY LOOP SEARCH TIME LIMIT EXCEEDED')
 1015 FORMAT(1H0,
     & 'INNER REACTIVITY LOOP SEARCH ITERATION LIMIT EXCEEDED')
 1016 FORMAT(' DB13',' IX(70)=',I5,' IX(73)=',I5,' IX(74)=',I5,
     & ' IX(75)=',I5,' IX(126)=',I5,' IX(130)=',I5)
      END
