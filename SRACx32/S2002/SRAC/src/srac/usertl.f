      SUBROUTINE USERTL(NEGT,IPATH)
C
C**** SUBPROGRAM TO COMPOSE USER'S THERMAL LIBRARY ****************
C
C
CMOD  PARAMETER ( MXLISO = 2000 )
      INCLUDE  'MATDTINC'
C
      PARAMETER   ( MXCOMC  = 9*MAXMAT +  6*MXLISO )
C
      CHARACTER*8       JNFSTL,FNFSTL,JNTHEL,FNTHEL,
     1                  JNEFST,FNEFST,JNETHE,FNETHE
      CHARACTER*12      DDNAME,FILENM
C
      COMMON /MAINC/ IOPT(20),JNFSTL   ,FNFSTL   ,JNTHEL   ,FNTHEL
     1   ,JNEFST   ,FNEFST   ,JNETHE   ,FNETHE   ,IUPSCT   ,IBSPCT
     2   ,ISCT     ,IFIXS    ,ICTOT    ,ICOND    ,IP1C     ,IFF1
     2   ,LCXIWT   ,IBKSCH   ,MXINP2   ,IDUM45(5)
     3   ,NEFL     ,NETL     ,NEF      ,NET      ,NERF     ,NERT
     4   ,NMAT     ,NETL1    ,BSQ      ,NIN1     ,NIN2     ,NOUT1
     5   ,NOUT2    ,IT0      ,NEFL1    ,NEFL2    ,NEFL3    ,NEF1
     6   ,NEF2     ,NEF3     ,ISTP     ,NSOUC    ,NFIN     ,NFOUT
     7   ,ITYPE    ,IMCEF    ,IBNSTP   ,MEMFST
     8   ,LCNEGF   ,LCNEGT   ,LCNECF   ,LCNECT   ,LCMTNM   ,LCNISO
     9   ,LCTEMP   ,LCXL     ,LCXCDC   ,LCLISO   ,LCIDNT   ,LCDN
     A   ,LCIRES   ,LCIXMC   ,NFTOT    ,MEMORY   ,IOPEN    ,IRANG
     B   ,ICF      ,INITL
     C   ,CASEID(2),TITLE(18)
     D   ,II(MXCOMC)
C
      COMMON /USERIX/ NUCLID(2,MXLISO),NUCLNO
      COMMON /PDSPDS/ DDNAME(125),IST(15),IRW(15),IOS(35),NC(5,20),
     &                IFLSW,FILENM,ECODE,TEMP
C
      COMMON /WORK  / A(60000)
C
      DIMENSION       NEGT(1)
C
C-----CHECK PRODUCTION OF THERMAL-LIBRARY
C
      IF(NET .LE.0)  WRITE(NOUT1,6020)
      IF(NET .LE.0)  RETURN
      IF(NETL.LE.0)  WRITE(NOUT1,6030)
      IF(NETL.LE.0)  RETURN
C
      IF(IPATH.EQ.1.AND.NUCLNO.LE.0) RETURN
C
C *** OPEN PUBILIC THERMAL LIBRARY
C
          FILENM=  'THERMALP    '
          MPSPDS= 0
          CALL FILSRC(MPSPDS,FILENM)
          FILENM=DDNAME(MPSPDS)
          IF(IOS(MPSPDS).EQ.0) CALL OPNPDS(IRW(MPSPDS))
          WRITE(6,*) ' FILENM IRW IST ; ',FILENM,IRW(MPSPDS),IST(MPSPDS)
C
C-----CALCULATES USER THERMAL LIBRARY
C
      NTMAX  = 15
      NGT    = NETL
      NGT1   = NGT + 1
      NGT4   = NGT + 4
      NET1   = NET + 1
      NET5   = NET + 5
      LENWRK = (NGT+5)*NGT*NTMAX
      MXSIG0 = 8
      LNWRK2 = MXSIG0*NTMAX*NGT
      IF(LNWRK2.GT.LENWRK)  LENWRK = LNWRK2
C
      LOC01  = 1
C **** WF(NGT,NTMAX)
      LOC02  = LOC01 +  NGT*NTMAX
C **** WR(NET,NTMAX)
      LOC03  = LOC02 +  NET*NTMAX
C **** FLUX1(NGT,NTMAX)
      LOC04  = LOC03 +  NGT*NTMAX
C **** FLUX2(NGT,NTMAX)
      LOC05  = LOC04 +  NGT*NTMAX
C **** WFNUC(NGT,NTMAX)
      LOC06  = LOC05 +  NGT*NTMAX
C **** WRNUC(NET,NTMAX)
      LOC07  = LOC06 +  NET*NTMAX
C **** FDATA(NGT,NGT4,NTMAX)
      LOC08  = LOC07 +  NGT*NGT4*NTMAX
C **** BDATA(NET,NET5,NTMAX)
      LOC09  = LOC08 +  NET*NET5*NTMAX
C **** FTABF(NGT,MXSIG0,NTMAX)
      LOC10  = LOC09 +  NGT*MXSIG0*NTMAX
C **** FTABB(NET,MXSIG0,NTMAX)
      LOC11  = LOC10 +  NET*MXSIG0*NTMAX
C **** SIGINF(NGT,NTMAX,2)
      LOC12  = LOC11 +  NGT*NTMAX*2
C **** SIGINR(NET,2)
      LOC13  = LOC12 +  NET*2
C **** XNU   (NGT,NTMAX)
      LOC14  = LOC13 +  NGT*NTMAX
C **** XNUB  (NET,NTMAX)
      LOC15  = LOC14 +  NET*NTMAX
C **** AR    (NET1)
      LOC16  = LOC15 +  NGT1
C **** AF    (NGT1)
      LOC17  = LOC16 +  NGT1
C **** NREG  (NGT1)
      LOC18  = LOC17 +  NGT1
C **** WORK  (LENWRK)
      LOC19  = LOC18 +  LENWRK
C **** WR1(NET,NTMAX)
      LOC20  = LOC19 +  NET*NTMAX
C **** WR2(NET,NTMAX)
      MAXX   = LOC20 +  NET*NTMAX
C
      MAXY     = MEMORY - MAXX
      IF(MAXY.LT.0) THEN
                    WRITE(NOUT2,1001)  MEMORY,MAXX,MAXY
                    MAXY = MAXX - MEMORY
                    WRITE(NOUT1,1002) MAXY
                    STOP
                    ENDIF
C
 1001 FORMAT(////,5X,'* DYNAMIC AREA INFORMATION. (USERTL) *'
     1     ///1H ,10X,'MEMORY LOCATIONS RESERVED FOR DATA STORAGE -- ',
     2        I6,' WARDS.',
     3       /1H ,10X,'MEMORY LOCATIONS USED FOR THIS PROBLEM ------ ',
     4        I6,' WARDS.',
     5       /1H ,10X,'MEMORY LOCATIONS NOT USED ------------------- ',
     6        I6,' WARDS.')
 1002 FORMAT(//1H ,10X,' MEMORY SIZE IS ',I6,' WARDS OVER IN USERTL ]]')
C
C
      CALL  CLEA( A , MAXX , 0.0 )
C
*     WRITE(6,*) ' **** MEMORY LOACTION FOR USERTL *********** '
*     WRITE(6,*) LOC01,LOC02,LOC03,LOC04,LOC05,LOC06,LOC07,LOC08,LOC09
*     WRITE(6,*) LOC10,LOC11,LOC12,LOC13,LOC14,LOC15,LOC16,LOC17,LOC18
*     WRITE(6,*) LOC19,LOC20,MAXX
*     WRITE(6,*) ' ** NGT NGT1 NGT4 NET NET1 NET5 NTMAX MXSIG0 ** '
*     WRITE(6,*)      NGT,NGT1,NGT4,NET,NET1,NET5,NTMAX,MXSIG0
C
CM    CALL UTLCAL(NEGT)
C
      CALL UTLCAL(NEGT,NGT,NGT1,NGT4,NET1,NET5,NTMAX,MXSIG0,
     +            A(LOC01),A(LOC02),A(LOC03),A(LOC04),A(LOC05),
     +            A(LOC06),A(LOC07),A(LOC08),A(LOC09),A(LOC10),
     +            A(LOC11),A(LOC12),A(LOC13),A(LOC14),A(LOC15),
     +            A(LOC16),A(LOC17),A(LOC18),A(LOC07),A(LOC08),
     +            A(LOC19),A(LOC20),LENWRK )
C
C *** CLOSE PUBILIC THERMAL LIBRARY
C
          FILENM=  'THERMALP    '
          MPSPDS= 0
          CALL FILSRC(MPSPDS,FILENM)
          FILENM=DDNAME(MPSPDS)
          IF(IOS(MPSPDS).NE.0) CALL CLSPDS(0)
C
 6020 FORMAT(1H ,' CAUTION --- THERMAL LIBRARY NOT USED'/
     +           '              USERTL ROUTINE IS SKIPPED')
 6030 FORMAT(1H ,' CAUTION --- NO PUBLIC THERMAL LIBRARY'/
     +           '              USERTL ROUTINE IS SKIPPED')
C
      END
